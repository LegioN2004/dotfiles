return {
  {
    'neovim/nvim-lspconfig',
    dependencies = {
      {
        "williamboman/mason.nvim",
        build = ":MasonUpdate",
        opts = {
          pip = {
            upgrade_pip = true,
          },
          ui = {
            border = "rounded",
            icons = {
              package_installed = "✓",
              package_pending = "➜",
              package_uninstalled = "✗",
            },
          },
        },
      },
      'williamboman/mason-lspconfig.nvim', -- Optional
    },
  },
  config = function()
    -- lsp configurations-----------------------------

    local status, nvim_lsp = pcall ( require, 'lspconfig')
    if (not status) then return end

    local protocol = require ( 'vim.lsp.protocol' )

    local on_attach = function(client, bufnr)
      -- formatting
      if client.server_capabilities.documentFormattingProvider then
        vim.api.nvim_command [[augroup Format]]
        vim.api.nvim_command [[autocmd! * <buffer>]]
        vim.api.nvim_command [[autocmd BufWritePre <buffer> lua vim.lsp.buf.formatting_seq_sync()]]
        vim.api.nvim_command [[augroup END]]
      end
    end

    -- nvim_lsp.clangd.setup {
    require'lspconfig'.clangd.setup {
      capabilities = {['default'] = require('lsp').protocol.make_client_capabilities(), ['offsetEncoding'] = 'utf-8'},
      on_attach = on_attach,
      filetypes = { "c", "cpp", "objc", "objcpp", "cuda", "proto" },
      cmd = { "clangd" },
      root_dir = { 
        root_pattern(
          '.clangd',
          '.clang-tidy',
          '.clang-format',
          'compile_commands.json',
          'compile_flags.txt',
          'configure.ac',
          '.git'
        )
      },
      single_file_support = true,
    }

    -- nvim_lsp.sumneko_lua.setup {
    require'lspconfig'.lua_ls.setup {
      on_attach = on_attach,
      settings = {
        Lua = {
          diagnostics = {
            -- Get the language server to recognize the `vim` global
            globals = { "vim" }
          },
          workspace = {
            -- Make the server aware of Neovim runtime files
            library = vim.api.nvim_get_runtime_file("", true),
            -- vim.fn.stdpath("config"),
            checkThirdParty = false,
          },
          -- Do not send telemetry data containing a randomized but unique identifier
          telemetry = {
            enable = false,
          },
        },
      },
    }
  end
}
